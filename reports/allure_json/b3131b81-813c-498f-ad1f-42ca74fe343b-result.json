{"name": "登录", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: [Errno Expecting value] <!doctype html>\n<html lang=en>\n  <head>\n    <title>TypeError: object of type 'NoneType' has no len()\n // Werkzeug Debugger</title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\n    <script>\n      var CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = \"eUWEymbsLYtGv6vYEYUF\";\n    </script>\n  </head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>TypeError</h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">TypeError: object of type &#39;NoneType&#39; has no len()\n</p>\n</div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\n<div class=\"traceback\">\n  <h3></h3>\n  <ul><li><div class=\"frame\" id=\"frame-12638032\">\n  <h4>File <cite class=\"filename\">\"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2548</em>,\n      in <code class=\"function\">__call__</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-12638152\">\n  <h4>File <cite class=\"filename\">\"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2528</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-12638272\">\n  <h4>File <cite class=\"filename\">\"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">2525</em>,\n      in <code class=\"function\">wsgi_app</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\n<pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-12638392\">\n  <h4>File <cite class=\"filename\">\"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1822</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-12638512\">\n  <h4>File <cite class=\"filename\">\"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1820</em>,\n      in <code class=\"function\">full_dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\n<pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\n<pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-12638632\">\n  <h4>File <cite class=\"filename\">\"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\"</cite>,\n      line <em class=\"line\">1796</em>,\n      in <code class=\"function\">dispatch_request</code></h4>\n  <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\n<pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n<pre class=\"line current\"><span class=\"ws\">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)</pre>\n<pre class=\"line after\"><span class=\"ws\"></span> </pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\n</div>\n\n<li><div class=\"frame\" id=\"frame-12638752\">\n  <h4>File <cite class=\"filename\">\"D:\\TDpytest\\api\\interface.py\"</cite>,\n      line <em class=\"line\">67</em>,\n      in <code class=\"function\">login</code></h4>\n  <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>username = data.get(&#39;username&#39;)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>passwd = data.get(&#39;passwd&#39;)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>print(&#39;用户传入的username的值为：&#39;, username, &#39;  转入passwd的值为：&#39;, passwd)</pre>\n<pre class=\"line before\"><span class=\"ws\">    </span>if len(username) == 0:</pre>\n<pre class=\"line before\"><span class=\"ws\">        </span>return json.dumps({&#34;code&#34;: 1001, &#34;msg&#34;: &#34;用户名不能为空&#34;}, ensure_ascii=False)</pre>\n<pre class=\"line current\"><span class=\"ws\">    </span>elif len(passwd) == 0:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>return json.dumps({&#39;code&#39;: 1002, &#34;msg&#34;: &#34;密码不能为空&#34;}, ensure_ascii=False)</pre>\n<pre class=\"line after\"><span class=\"ws\">    </span>else:</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>db = DBUtils()</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>count = db.find_count(&#34;select * from my_user where username=%s and password = %s&#34;, (username, passwd))</pre>\n<pre class=\"line after\"><span class=\"ws\">        </span>db.close()</pre></div>\n</div>\n</ul>\n  <blockquote>TypeError: object of type &#39;NoneType&#39; has no len()\n</blockquote>\n</div>\n\n<div class=\"plain\">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\n  File &#34;D:\\tools\\python37\\lib\\site-packages\\flask\\app.py&#34;, line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &#34;D:\\tools\\python37\\lib\\site-packages\\flask\\app.py&#34;, line 2528, in wsgi_app\n    response = self.handle_exception(e)\n  File &#34;D:\\tools\\python37\\lib\\site-packages\\flask\\app.py&#34;, line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n  File &#34;D:\\tools\\python37\\lib\\site-packages\\flask\\app.py&#34;, line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &#34;D:\\tools\\python37\\lib\\site-packages\\flask\\app.py&#34;, line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &#34;D:\\tools\\python37\\lib\\site-packages\\flask\\app.py&#34;, line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n  File &#34;D:\\TDpytest\\api\\interface.py&#34;, line 67, in login\n    elif len(passwd) == 0:\nTypeError: object of type &#39;NoneType&#39; has no len()\n</textarea>\n</div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File \"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\", line 2548, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\", line 2528, in wsgi_app\n    response = self.handle_exception(e)\n  File \"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\", line 2525, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\", line 1822, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\", line 1820, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\", line 1796, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n  File \"D:\\TDpytest\\api\\interface.py\", line 67, in login\n    elif len(passwd) == 0:\nTypeError: object of type 'NoneType' has no len()\n\n\n-->\n: 0", "trace": "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(\n                        self.content.decode(encoding), **kwargs\n                    )\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\nD:\\tools\\python37\\lib\\site-packages\\requests\\models.py:910: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '<!doctype html>\\n<html lang=en>\\n  <head>\\n    <title>TypeError: object of type \\'NoneType\\' has no len()\\n // Werkze...ace.py\", line 67, in login\\n    elif len(passwd) == 0:\\nTypeError: object of type \\'NoneType\\' has no len()\\n\\n\\n-->\\n'\nencoding = None, cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\nD:\\tools\\python37\\lib\\json\\__init__.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000000000343B208>\ns = '<!doctype html>\\n<html lang=en>\\n  <head>\\n    <title>TypeError: object of type \\'NoneType\\' has no len()\\n // Werkze...ace.py\", line 67, in login\\n    elif len(passwd) == 0:\\nTypeError: object of type \\'NoneType\\' has no len()\\n\\n\\n-->\\n'\n_w = <built-in method match of re.Pattern object at 0x000000000332CF30>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\nD:\\tools\\python37\\lib\\json\\decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000000000343B208>\ns = '<!doctype html>\\n<html lang=en>\\n  <head>\\n    <title>TypeError: object of type \\'NoneType\\' has no len()\\n // Werkze...ace.py\", line 67, in login\\n    elif len(passwd) == 0:\\nTypeError: object of type \\'NoneType\\' has no len()\\n\\n\\n-->\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\tools\\python37\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TDpytest.test_cases.test_business.test_login.test_login.TestLogin object at 0x0000000003FE6470>\ncase = {'case_data': {'password': 'a12345678', 'username': 'xiaosun'}, 'case_id': 4, 'case_title': '登录', 'expect': {'code': 1003, 'msg': '用户名或者密码错误'}, ...}\n\n    @pytest.mark.parametrize('case', cases, ids=ids)\n    def test_login(self, case):\n        allure.dynamic.title(case['case_title'])\n        if '#username#' in case['case_data'].values():\n            case['case_data']['username'] = self.data_name\n        if '#password#' in case['case_data'].values():\n            case['case_data']['password'] = self.data_password\n        response = requests.post(url=case['url'], data=case[\"case_data\"])\n>       res = response.json()\n\ntest_cases\\test_business\\test_login\\test_login.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(\n                        self.content.decode(encoding), **kwargs\n                    )\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n            if is_py2: # e is a ValueError\n                raise RequestsJSONDecodeError(e.message)\n            else:\n>               raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE               requests.exceptions.JSONDecodeError: [Errno Expecting value] <!doctype html>\nE               <html lang=en>\nE                 <head>\nE                   <title>TypeError: object of type 'NoneType' has no len()\nE                // Werkzeug Debugger</title>\nE                   <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\nE                   <link rel=\"shortcut icon\"\nE                       href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\nE                   <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"></script>\nE                   <script>\nE                     var CONSOLE_MODE = false,\nE                         EVALEX = true,\nE                         EVALEX_TRUSTED = false,\nE                         SECRET = \"eUWEymbsLYtGv6vYEYUF\";\nE                   </script>\nE                 </head>\nE                 <body style=\"background-color: #fff\">\nE                   <div class=\"debugger\">\nE               <h1>TypeError</h1>\nE               <div class=\"detail\">\nE                 <p class=\"errormsg\">TypeError: object of type &#39;NoneType&#39; has no len()\nE               </p>\nE               </div>\nE               <h2 class=\"traceback\">Traceback <em>(most recent call last)</em></h2>\nE               <div class=\"traceback\">\nE                 <h3></h3>\nE                 <ul><li><div class=\"frame\" id=\"frame-12638032\">\nE                 <h4>File <cite class=\"filename\">\"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\"</cite>,\nE                     line <em class=\"line\">2548</em>,\nE                     in <code class=\"function\">__call__</code></h4>\nE                 <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\nE               <pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\nE               <pre class=\"line before\"><span class=\"ws\">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\nE               <pre class=\"line before\"><span class=\"ws\">        </span>wrapped to apply middleware.</pre>\nE               <pre class=\"line before\"><span class=\"ws\">        </span>&#34;&#34;&#34;</pre>\nE               <pre class=\"line current\"><span class=\"ws\">        </span>return self.wsgi_app(environ, start_response)</pre></div>\nE               </div>\nE               \nE               <li><div class=\"frame\" id=\"frame-12638152\">\nE                 <h4>File <cite class=\"filename\">\"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\"</cite>,\nE                     line <em class=\"line\">2528</em>,\nE                     in <code class=\"function\">wsgi_app</code></h4>\nE                 <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\nE               <pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\nE               <pre class=\"line before\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\nE               <pre class=\"line before\"><span class=\"ws\">            </span>except Exception as e:</pre>\nE               <pre class=\"line before\"><span class=\"ws\">                </span>error = e</pre>\nE               <pre class=\"line current\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\nE               <pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\nE               <pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre>\nE               <pre class=\"line after\"><span class=\"ws\">                </span>raise</pre>\nE               <pre class=\"line after\"><span class=\"ws\">            </span>return response(environ, start_response)</pre>\nE               <pre class=\"line after\"><span class=\"ws\">        </span>finally:</pre></div>\nE               </div>\nE               \nE               <li><div class=\"frame\" id=\"frame-12638272\">\nE                 <h4>File <cite class=\"filename\">\"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\"</cite>,\nE                     line <em class=\"line\">2525</em>,\nE                     in <code class=\"function\">wsgi_app</code></h4>\nE                 <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">        </span>ctx = self.request_context(environ)</pre>\nE               <pre class=\"line before\"><span class=\"ws\">        </span>error: t.Optional[BaseException] = None</pre>\nE               <pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\nE               <pre class=\"line before\"><span class=\"ws\">            </span>try:</pre>\nE               <pre class=\"line before\"><span class=\"ws\">                </span>ctx.push()</pre>\nE               <pre class=\"line current\"><span class=\"ws\">                </span>response = self.full_dispatch_request()</pre>\nE               <pre class=\"line after\"><span class=\"ws\">            </span>except Exception as e:</pre>\nE               <pre class=\"line after\"><span class=\"ws\">                </span>error = e</pre>\nE               <pre class=\"line after\"><span class=\"ws\">                </span>response = self.handle_exception(e)</pre>\nE               <pre class=\"line after\"><span class=\"ws\">            </span>except:  # noqa: B001</pre>\nE               <pre class=\"line after\"><span class=\"ws\">                </span>error = sys.exc_info()[1]</pre></div>\nE               </div>\nE               \nE               <li><div class=\"frame\" id=\"frame-12638392\">\nE                 <h4>File <cite class=\"filename\">\"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\"</cite>,\nE                     line <em class=\"line\">1822</em>,\nE                     in <code class=\"function\">full_dispatch_request</code></h4>\nE                 <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\nE               <pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\nE               <pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\nE               <pre class=\"line before\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\nE               <pre class=\"line before\"><span class=\"ws\">        </span>except Exception as e:</pre>\nE               <pre class=\"line current\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\nE               <pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\nE               <pre class=\"line after\"><span class=\"ws\"></span> </pre>\nE               <pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre>\nE               <pre class=\"line after\"><span class=\"ws\">        </span>self,</pre>\nE               <pre class=\"line after\"><span class=\"ws\">        </span>rv: t.Union[ft.ResponseReturnValue, HTTPException],</pre></div>\nE               </div>\nE               \nE               <li><div class=\"frame\" id=\"frame-12638512\">\nE                 <h4>File <cite class=\"filename\">\"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\"</cite>,\nE                     line <em class=\"line\">1820</em>,\nE                     in <code class=\"function\">full_dispatch_request</code></h4>\nE                 <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\"></span> </pre>\nE               <pre class=\"line before\"><span class=\"ws\">        </span>try:</pre>\nE               <pre class=\"line before\"><span class=\"ws\">            </span>request_started.send(self)</pre>\nE               <pre class=\"line before\"><span class=\"ws\">            </span>rv = self.preprocess_request()</pre>\nE               <pre class=\"line before\"><span class=\"ws\">            </span>if rv is None:</pre>\nE               <pre class=\"line current\"><span class=\"ws\">                </span>rv = self.dispatch_request()</pre>\nE               <pre class=\"line after\"><span class=\"ws\">        </span>except Exception as e:</pre>\nE               <pre class=\"line after\"><span class=\"ws\">            </span>rv = self.handle_user_exception(e)</pre>\nE               <pre class=\"line after\"><span class=\"ws\">        </span>return self.finalize_request(rv)</pre>\nE               <pre class=\"line after\"><span class=\"ws\"></span> </pre>\nE               <pre class=\"line after\"><span class=\"ws\">    </span>def finalize_request(</pre></div>\nE               </div>\nE               \nE               <li><div class=\"frame\" id=\"frame-12638632\">\nE                 <h4>File <cite class=\"filename\">\"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\"</cite>,\nE                     line <em class=\"line\">1796</em>,\nE                     in <code class=\"function\">dispatch_request</code></h4>\nE                 <div class=\"source library\"><pre class=\"line before\"><span class=\"ws\">            </span>and req.method == &#34;OPTIONS&#34;</pre>\nE               <pre class=\"line before\"><span class=\"ws\">        </span>):</pre>\nE               <pre class=\"line before\"><span class=\"ws\">            </span>return self.make_default_options_response()</pre>\nE               <pre class=\"line before\"><span class=\"ws\">        </span># otherwise dispatch to the handler for that endpoint</pre>\nE               <pre class=\"line before\"><span class=\"ws\">        </span>view_args: t.Dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\nE               <pre class=\"line current\"><span class=\"ws\">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)</pre>\nE               <pre class=\"line after\"><span class=\"ws\"></span> </pre>\nE               <pre class=\"line after\"><span class=\"ws\">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\nE               <pre class=\"line after\"><span class=\"ws\">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\nE               <pre class=\"line after\"><span class=\"ws\">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\nE               <pre class=\"line after\"><span class=\"ws\">        </span>error handling.</pre></div>\nE               </div>\nE               \nE               <li><div class=\"frame\" id=\"frame-12638752\">\nE                 <h4>File <cite class=\"filename\">\"D:\\TDpytest\\api\\interface.py\"</cite>,\nE                     line <em class=\"line\">67</em>,\nE                     in <code class=\"function\">login</code></h4>\nE                 <div class=\"source \"><pre class=\"line before\"><span class=\"ws\">    </span>username = data.get(&#39;username&#39;)</pre>\nE               <pre class=\"line before\"><span class=\"ws\">    </span>passwd = data.get(&#39;passwd&#39;)</pre>\nE               <pre class=\"line before\"><span class=\"ws\">    </span>print(&#39;用户传入的username的值为：&#39;, username, &#39;  转入passwd的值为：&#39;, passwd)</pre>\nE               <pre class=\"line before\"><span class=\"ws\">    </span>if len(username) == 0:</pre>\nE               <pre class=\"line before\"><span class=\"ws\">        </span>return json.dumps({&#34;code&#34;: 1001, &#34;msg&#34;: &#34;用户名不能为空&#34;}, ensure_ascii=False)</pre>\nE               <pre class=\"line current\"><span class=\"ws\">    </span>elif len(passwd) == 0:</pre>\nE               <pre class=\"line after\"><span class=\"ws\">        </span>return json.dumps({&#39;code&#39;: 1002, &#34;msg&#34;: &#34;密码不能为空&#34;}, ensure_ascii=False)</pre>\nE               <pre class=\"line after\"><span class=\"ws\">    </span>else:</pre>\nE               <pre class=\"line after\"><span class=\"ws\">        </span>db = DBUtils()</pre>\nE               <pre class=\"line after\"><span class=\"ws\">        </span>count = db.find_count(&#34;select * from my_user where username=%s and password = %s&#34;, (username, passwd))</pre>\nE               <pre class=\"line after\"><span class=\"ws\">        </span>db.close()</pre></div>\nE               </div>\nE               </ul>\nE                 <blockquote>TypeError: object of type &#39;NoneType&#39; has no len()\nE               </blockquote>\nE               </div>\nE               \nE               <div class=\"plain\">\nE                   <p>\nE                     This is the Copy/Paste friendly version of the traceback.\nE                   </p>\nE                   <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Traceback (most recent call last):\nE                 File &#34;D:\\tools\\python37\\lib\\site-packages\\flask\\app.py&#34;, line 2548, in __call__\nE                   return self.wsgi_app(environ, start_response)\nE                 File &#34;D:\\tools\\python37\\lib\\site-packages\\flask\\app.py&#34;, line 2528, in wsgi_app\nE                   response = self.handle_exception(e)\nE                 File &#34;D:\\tools\\python37\\lib\\site-packages\\flask\\app.py&#34;, line 2525, in wsgi_app\nE                   response = self.full_dispatch_request()\nE                 File &#34;D:\\tools\\python37\\lib\\site-packages\\flask\\app.py&#34;, line 1822, in full_dispatch_request\nE                   rv = self.handle_user_exception(e)\nE                 File &#34;D:\\tools\\python37\\lib\\site-packages\\flask\\app.py&#34;, line 1820, in full_dispatch_request\nE                   rv = self.dispatch_request()\nE                 File &#34;D:\\tools\\python37\\lib\\site-packages\\flask\\app.py&#34;, line 1796, in dispatch_request\nE                   return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\nE                 File &#34;D:\\TDpytest\\api\\interface.py&#34;, line 67, in login\nE                   elif len(passwd) == 0:\nE               TypeError: object of type &#39;NoneType&#39; has no len()\nE               </textarea>\nE               </div>\nE               <div class=\"explanation\">\nE                 The debugger caught an exception in your WSGI application.  You can now\nE                 look at the traceback which led to the error.  <span class=\"nojavascript\">\nE                 If you enable JavaScript you can also use additional features such as code\nE                 execution (if the evalex feature is enabled), automatic pasting of the\nE                 exceptions and much more.</span>\nE               </div>\nE                     <div class=\"footer\">\nE                       Brought to you by <strong class=\"arthur\">DON'T PANIC</strong>, your\nE                       friendly Werkzeug powered traceback interpreter.\nE                     </div>\nE                   </div>\nE               \nE                   <div class=\"pin-prompt\">\nE                     <div class=\"inner\">\nE                       <h3>Console Locked</h3>\nE                       <p>\nE                         The console is locked and needs to be unlocked by entering the PIN.\nE                         You can find the PIN printed out on the standard output of your\nE                         shell that runs the server.\nE                       <form>\nE                         <p>PIN:\nE                           <input type=text name=pin size=14>\nE                           <input type=submit name=btn value=\"Confirm Pin\">\nE                       </form>\nE                     </div>\nE                   </div>\nE                 </body>\nE               </html>\nE               \nE               <!--\nE               \nE               Traceback (most recent call last):\nE                 File \"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\", line 2548, in __call__\nE                   return self.wsgi_app(environ, start_response)\nE                 File \"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\", line 2528, in wsgi_app\nE                   response = self.handle_exception(e)\nE                 File \"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\", line 2525, in wsgi_app\nE                   response = self.full_dispatch_request()\nE                 File \"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\", line 1822, in full_dispatch_request\nE                   rv = self.handle_user_exception(e)\nE                 File \"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\", line 1820, in full_dispatch_request\nE                   rv = self.dispatch_request()\nE                 File \"D:\\tools\\python37\\lib\\site-packages\\flask\\app.py\", line 1796, in dispatch_request\nE                   return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\nE                 File \"D:\\TDpytest\\api\\interface.py\", line 67, in login\nE                   elif len(passwd) == 0:\nE               TypeError: object of type 'NoneType' has no len()\nE               \nE               \nE               -->\nE               : 0\n\nD:\\tools\\python37\\lib\\site-packages\\requests\\models.py:917: JSONDecodeError"}, "attachments": [{"name": "log", "source": "4d479067-bdb7-4c6c-8722-4f55e617f635-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 4, 'case_title': '登录', 'interface': '密码错误', 'url': 'http://127.0.0.1:5000/user_login', 'case_data': {'username': 'xiaosun', 'password': 'a12345678'}, 'expect': {'code': 1003, 'msg': '用户名或者密码错误'}}"}], "start": 1676945009372, "stop": 1676945009376, "uuid": "99338181-2452-4899-ba03-a98bd9f2f027", "historyId": "ca3c448187f48036bf7cc61eacb58ff9", "testCaseId": "745f7f2c40601f3409af66ae2aebb521", "fullName": "test_cases.test_business.test_login.test_login.TestLogin#test_login", "labels": [{"name": "feature", "value": "登录测试"}, {"name": "epic", "value": "自己开发的接口"}, {"name": "parentSuite", "value": "test_cases.test_business.test_login"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "SD-20210312IQVR"}, {"name": "thread", "value": "11276-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_business.test_login.test_login"}]}