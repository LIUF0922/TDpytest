{"uid":"2bc54442ab57c613","name":"登录","fullName":"test_cases.test_business.test_login.test_login.TestLogin#test_login","historyId":"16eb2fcd0d922185666e97e30fb7f767","time":{"start":1676945009259,"stop":1676945009280,"duration":21},"status":"failed","statusMessage":"AssertionError: assert '登录成功' == {'code': 1000, 'msg': '登录成功'}","statusTrace":"self = <TDpytest.test_cases.test_business.test_login.test_login.TestLogin object at 0x0000000003FE6550>\ncase = {'case_data': {'passwd': '123456789', 'username': 'xiaosun'}, 'case_id': 1, 'case_title': '登录', 'expect': {'code': 1000, 'msg': '登录成功'}, ...}\n\n    @pytest.mark.parametrize('case', cases, ids=ids)\n    def test_login(self, case):\n        allure.dynamic.title(case['case_title'])\n        if '#username#' in case['case_data'].values():\n            case['case_data']['username'] = self.data_name\n        if '#password#' in case['case_data'].values():\n            case['case_data']['password'] = self.data_password\n        response = requests.post(url=case['url'], data=case[\"case_data\"])\n        res = response.json()\n        try:\n            if case['case_id'] == 1:\n                assert res['msg'] == case['expect']\n            else:\n                assert res == case['expect']\n        except AssertionError as e:\n            logger.error('测试失败，期望结果为:{},实际结果为:{}'.format(case['expect'], res))\n            logger.exception(e)\n>           raise e\n\ntest_cases\\test_business\\test_login\\test_login.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TDpytest.test_cases.test_business.test_login.test_login.TestLogin object at 0x0000000003FE6550>\ncase = {'case_data': {'passwd': '123456789', 'username': 'xiaosun'}, 'case_id': 1, 'case_title': '登录', 'expect': {'code': 1000, 'msg': '登录成功'}, ...}\n\n    @pytest.mark.parametrize('case', cases, ids=ids)\n    def test_login(self, case):\n        allure.dynamic.title(case['case_title'])\n        if '#username#' in case['case_data'].values():\n            case['case_data']['username'] = self.data_name\n        if '#password#' in case['case_data'].values():\n            case['case_data']['password'] = self.data_password\n        response = requests.post(url=case['url'], data=case[\"case_data\"])\n        res = response.json()\n        try:\n            if case['case_id'] == 1:\n>               assert res['msg'] == case['expect']\nE               AssertionError: assert '登录成功' == {'code': 1000, 'msg': '登录成功'}\n\ntest_cases\\test_business\\test_login\\test_login.py:39: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"db","time":{"start":1676945009255,"stop":1676945009258,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert '登录成功' == {'code': 1000, 'msg': '登录成功'}","statusTrace":"self = <TDpytest.test_cases.test_business.test_login.test_login.TestLogin object at 0x0000000003FE6550>\ncase = {'case_data': {'passwd': '123456789', 'username': 'xiaosun'}, 'case_id': 1, 'case_title': '登录', 'expect': {'code': 1000, 'msg': '登录成功'}, ...}\n\n    @pytest.mark.parametrize('case', cases, ids=ids)\n    def test_login(self, case):\n        allure.dynamic.title(case['case_title'])\n        if '#username#' in case['case_data'].values():\n            case['case_data']['username'] = self.data_name\n        if '#password#' in case['case_data'].values():\n            case['case_data']['password'] = self.data_password\n        response = requests.post(url=case['url'], data=case[\"case_data\"])\n        res = response.json()\n        try:\n            if case['case_id'] == 1:\n                assert res['msg'] == case['expect']\n            else:\n                assert res == case['expect']\n        except AssertionError as e:\n            logger.error('测试失败，期望结果为:{},实际结果为:{}'.format(case['expect'], res))\n            logger.exception(e)\n>           raise e\n\ntest_cases\\test_business\\test_login\\test_login.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TDpytest.test_cases.test_business.test_login.test_login.TestLogin object at 0x0000000003FE6550>\ncase = {'case_data': {'passwd': '123456789', 'username': 'xiaosun'}, 'case_id': 1, 'case_title': '登录', 'expect': {'code': 1000, 'msg': '登录成功'}, ...}\n\n    @pytest.mark.parametrize('case', cases, ids=ids)\n    def test_login(self, case):\n        allure.dynamic.title(case['case_title'])\n        if '#username#' in case['case_data'].values():\n            case['case_data']['username'] = self.data_name\n        if '#password#' in case['case_data'].values():\n            case['case_data']['password'] = self.data_password\n        response = requests.post(url=case['url'], data=case[\"case_data\"])\n        res = response.json()\n        try:\n            if case['case_id'] == 1:\n>               assert res['msg'] == case['expect']\nE               AssertionError: assert '登录成功' == {'code': 1000, 'msg': '登录成功'}\n\ntest_cases\\test_business\\test_login\\test_login.py:39: AssertionError","steps":[],"attachments":[{"uid":"d000b215250393c5","name":"log","source":"d000b215250393c5.txt","type":"text/plain","size":710},{"uid":"459de59970edc508","name":"stdout","source":"459de59970edc508.txt","type":"text/plain","size":19}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[{"name":"db::0","time":{"start":1676945009449,"stop":1676945009449,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"登录测试"},{"name":"epic","value":"自己开发的接口"},{"name":"parentSuite","value":"test_cases.test_business.test_login"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"SD-20210312IQVR"},{"name":"thread","value":"11276-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_business.test_login.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'case_id': 1, 'case_title': '登录', 'interface': '正常流程', 'url': 'http://127.0.0.1:5000/user_login', 'case_data': {'username': 'xiaosun', 'passwd': '123456789'}, 'expect': {'code': 1000, 'msg': '登录成功'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"2bc54442ab57c613.json","parameterValues":["{'case_id': 1, 'case_title': '登录', 'interface': '正常流程', 'url': 'http://127.0.0.1:5000/user_login', 'case_data': {'username': 'xiaosun', 'passwd': '123456789'}, 'expect': {'code': 1000, 'msg': '登录成功'}}"]}